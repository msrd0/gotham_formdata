initSidebarItems({"struct":[["AcceptHeaderRouteMatcher","A `RouteMatcher` that succeeds when the `Request` has been made with an `Accept` header that includes one or more supported media types. A missing `Accept` header, or the value of `*/*` will also positvely match. It supports the quality weighted syntax, but does not take the quality into consideration when matching."],["AccessControlRequestMethodMatcher","A route matcher that checks whether the value of the `Access-Control-Request-Method` header matches the defined value."],["AndRouteMatcher","Allows multiple `RouteMatcher` values to be combined when accessing a request."],["AnyRouteMatcher","Matches any request without restriction (i.e. will accept any request which has already matched the path to the current route). For example, this matcher is used when delegating a path prefix to another router."],["ContentTypeHeaderRouteMatcher","A `RouteMatcher` that succeeds when the `Request` has been made with a `Content-Type` header that includes a supported media type. The matcher will fail if the Content-Type header is missing, unless you call `allow_no_type` on it."],["MethodOnlyRouteMatcher","A `RouteMatcher` that succeeds when the `Request` has been made with an accepted HTTP request method."]],"trait":[["IntoRouteMatcher","Allow various types to represent themselves as a `RouteMatcher`"],["RouteMatcher","Determines if conditions required for the associated `Route` to be invoked by the `Router` have been met."]]});