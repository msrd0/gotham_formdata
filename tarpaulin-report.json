{"files":[{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","derive","src","form_data","builder.rs"],"content":"use super::Field;\nuse proc_macro2::{Ident, TokenStream};\nuse syn::Generics;\n\npub(super) struct FormDataBuilder<'a> {\n\tpub(super) name: &'a Ident,\n\tpub(super) err_ident: &'a Ident,\n\tpub(super) ident: Ident,\n\tpub(super) generics: &'a Generics,\n\tpub(super) fields: &'a [Field]\n}\n\nimpl<'a> FormDataBuilder<'a> {\n\tpub(super) fn gen_struct(&self) -> TokenStream {\n\t\tlet ident = &self.ident;\n\t\tlet (impl_gen, _, were) = self.generics.split_for_impl();\n\n\t\tlet field_names = self.fields.iter().map(|f| &f.ident);\n\t\tlet field_types = self.fields.iter().map(|f| &f.ty);\n\n\t\tquote! {\n\t\t\t#[doc(hidden)]\n\t\t\tstruct #ident #impl_gen #were {\n\t\t\t\t#( #field_names: Option<#field_types> ),*\n\t\t\t}\n\t\t}\n\t}\n\n\tpub(super) fn gen_default_impl(&self) -> TokenStream {\n\t\tlet ident = &self.ident;\n\t\tlet (impl_gen, ty_gen, were) = self.generics.split_for_impl();\n\n\t\tlet field_names = self.fields.iter().map(|f| &f.ident);\n\n\t\tquote! {\n\t\t\timpl #impl_gen Default for #ident #ty_gen #were {\n\t\t\t\tfn default() -> Self {\n\t\t\t\t\tSelf {\n\t\t\t\t\t\t#( #field_names: None ),*\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpub(super) fn gen_builder_impl(&self) -> TokenStream {\n\t\tlet name = &self.name;\n\t\tlet err_ident = &self.err_ident;\n\t\tlet ident = &self.ident;\n\t\tlet (impl_gen, ty_gen, were) = self.generics.split_for_impl();\n\n\t\tlet field_names = self.fields.iter().map(|f| &f.ident).collect::<Vec<_>>();\n\t\tlet field_types = self.fields.iter().map(|f| &f.ty);\n\n\t\tquote! {\n\t\t\timpl #impl_gen ::gotham_formdata::internal::FormDataBuilder for #ident #ty_gen #were {\n\t\t\t\ttype Data = #name #ty_gen;\n\t\t\t\ttype Err = #err_ident;\n\n\t\t\t\tfn add_entry<'a>(\n\t\t\t\t\t\t&'a mut self,\n\t\t\t\t\t\tname: ::std::borrow::Cow<'a, str>,\n\t\t\t\t\t\tvalue: ::gotham_formdata::value::Value<'a, ::gotham_formdata::Error<Self::Err>>\n\t\t\t\t) -> ::gotham_formdata::internal::FormDataBuilderFuture<'a, Self::Err> {\n\t\t\t\t\t#[allow(unused_imports)]\n\t\t\t\t\tuse ::gotham_formdata::{conversion::prelude::*, export::{FutureExt, StreamExt}};\n\n\t\t\t\t\tasync move {\n\t\t\t\t\t\tlet name: &str = &name;\n\t\t\t\t\t\tmatch name {\n\t\t\t\t\t\t\t#(stringify!(#field_names) => {\n\t\t\t\t\t\t\t\tlog::debug!(\"Found value for field {}\", name);\n\t\t\t\t\t\t\t\tlet value_parsed = <#field_types>::convert_value(name, value).await?;\n\t\t\t\t\t\t\t\tself.#field_names.replace(value_parsed);\n\t\t\t\t\t\t\t\tOk(())\n\t\t\t\t\t\t\t},)*\n\t\t\t\t\t\t\t_ => {\n\t\t\t\t\t\t\t\tlog::debug!(\"Found an unknown field: {}\", name);\n\t\t\t\t\t\t\t\tErr(::gotham_formdata::Error::UnknownField(name.to_string()))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}.boxed()\n\t\t\t\t}\n\n\t\t\t\tfn build(self) -> Result<#name #ty_gen, ::gotham_formdata::Error<Self::Err>> {\n\t\t\t\t\tOk(#name #ty_gen {\n\t\t\t\t\t\t#( #field_names: self.#field_names.ok_or(::gotham_formdata::Error::MissingField(stringify!(#field_names).to_owned()))? ),*\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","derive","src","form_data","field.rs"],"content":"use crate::util::*;\nuse proc_macro2::{Ident, Span, TokenStream};\nuse syn::{\n\tparse::{Parse, ParseStream},\n\tpunctuated::Punctuated,\n\tspanned::Spanned,\n\tError, Expr, Result, Token, Type\n};\n\n#[allow(dead_code)]\nstruct FieldMeta {\n\tident: Ident,\n\teq_token: Token![=],\n\texpr: Expr\n}\n\nimpl Parse for FieldMeta {\n\tfn parse(input: ParseStream<'_>) -> Result<Self> {\n\t\tOk(Self {\n\t\t\tident: input.parse()?,\n\t\t\teq_token: input.parse()?,\n\t\t\texpr: input.parse()?\n\t\t})\n\t}\n}\n\npub(super) struct Field {\n\tpub(super) ident: Ident,\n\tpub(super) ty: Type,\n\tpub(super) validator: Option<TokenStream>,\n\tpub(super) validation_error: Option<Expr>\n}\n\nimpl Field {\n\tpub(super) fn new(field: syn::Field) -> Result<Self> {\n\t\tlet span = field.span();\n\n\t\tlet mut ident = field\n\t\t\t.ident\n\t\t\t.ok_or(Error::new(span, \"Fields without an ident are not supported\"))?;\n\t\tident.set_span(Span::call_site());\n\n\t\tlet ty = field.ty;\n\t\t// unfortunately, we cannot change spans of types\n\n\t\tlet mut validator: Option<TokenStream> = None;\n\t\tlet mut validation_error: Option<Expr> = None;\n\t\tfor attr in field.attrs {\n\t\t\tif !attr.path.ends_with(\"validate\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet list = attr.parse_args_with(Punctuated::<FieldMeta, Token![,]>::parse_separated_nonempty)?;\n\t\t\t// parse_separated_nonempty guarantees that there is at least one element in the list\n\t\t\tfor meta in list.into_iter() {\n\t\t\t\tlet name = meta.ident;\n\t\t\t\tlet expr = meta.expr;\n\n\t\t\t\tlet new_validator = match name.to_string().as_ref() {\n\t\t\t\t\t// custom error message\n\t\t\t\t\t\"error\" => {\n\t\t\t\t\t\tif validation_error.is_some() {\n\t\t\t\t\t\t\treturn Err(Error::new(name.span(), \"'error' must not appear more than once\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalidation_error = Some(expr);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t},\n\n\t\t\t\t\t// custom validator\n\t\t\t\t\t\"validator\" => {\n\t\t\t\t\t\t// TODO this code makes sure to emit an error message pointing to the macro's\n\t\t\t\t\t\t// input, but there should be a better way to do this\n\t\t\t\t\t\tquote_spanned! { expr.span() =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet validator = #expr;\n\t\t\t\t\t\t\t\t::gotham_formdata::internal::assert_validator::<_, _>(&validator);\n\t\t\t\t\t\t\t\tvalidator\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// min_length validator\n\t\t\t\t\t\"min_length\" => quote!(::gotham_formdata::validate::MinLengthValidator::new(#expr)),\n\n\t\t\t\t\t// max_length validator\n\t\t\t\t\t\"max_length\" => quote!(::gotham_formdata::validate::MaxLengthValidator::new(#expr)),\n\n\t\t\t\t\t// min validator\n\t\t\t\t\t\"min\" => quote!(::gotham_formdata::validate::MinValidator::<#ty>::new(#expr)),\n\n\t\t\t\t\t// max validator\n\t\t\t\t\t\"max\" => quote!(::gotham_formdata::validate::MaxValidator::<#ty>::new(#expr)),\n\n\t\t\t\t\t// regex validator\n\t\t\t\t\t\"regex\" => {\n\t\t\t\t\t\tif cfg!(not(feature = \"regex\")) {\n\t\t\t\t\t\t\treturn Err(Error::new(\n\t\t\t\t\t\t\t\tname.span(),\n\t\t\t\t\t\t\t\t\"You need to enable the 'regex' feature of gotham_formdata to enable the regex validator\"\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet regex_ident = format_ident!(\"{}_validation_regex\", ident.to_string());\n\t\t\t\t\t\tquote!({\n\t\t\t\t\t\t\tstatic #regex_ident: ::gotham_formdata::validate::LazyRegex = ::gotham_formdata::validate::LazyRegex::new(#expr);\n\t\t\t\t\t\t\t::gotham_formdata::validate::RegexValidator::new(#regex_ident.get().expect(\"Invalid Regex\"))\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\n\t\t\t\t\t// expected validator\n\t\t\t\t\t\"expected\" => quote!(::gotham_formdata::validate::ExpectedValidator::new(#expr)),\n\n\t\t\t\t\t_ => return Err(Error::new(name.span(), \"Unknown key for attribute validate\"))\n\t\t\t\t};\n\n\t\t\t\tvalidator = match validator {\n\t\t\t\t\tSome(old_validator) => Some(quote! {\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet first_validator = #old_validator;\n\t\t\t\t\t\t\tlet second_validator = #new_validator;\n\t\t\t\t\t\t\t::gotham_formdata::validate::CombinedValidator::new(first_validator, second_validator)\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\tNone => Some(new_validator)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tOk(Self {\n\t\t\tident,\n\t\t\tty,\n\t\t\tvalidator,\n\t\t\tvalidation_error\n\t\t})\n\t}\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","derive","src","form_data","mod.rs"],"content":"use crate::util::*;\nuse proc_macro2::{Span, TokenStream};\nuse syn::{Data, DeriveInput, Error, Fields, Result};\n\nmod builder;\nuse builder::FormDataBuilder;\n\nmod field;\nuse field::Field;\n\nmod validation_error;\nuse validation_error::ValidationError;\n\npub(super) fn expand(input: DeriveInput) -> Result<TokenStream> {\n\tlet name = &input.ident;\n\tlet (impl_gen, ty_gen, were) = input.generics.split_for_impl();\n\tlet strukt = match input.data {\n\t\tData::Struct(strukt) => strukt,\n\t\t_ => {\n\t\t\treturn Err(Error::new(\n\t\t\t\tSpan::call_site(),\n\t\t\t\t\"#[derive(FormData)] can only be used on structs\"\n\t\t\t))\n\t\t},\n\t};\n\n\tlet fields = match strukt.fields {\n\t\tFields::Named(named) => named.named.into_iter().map(|field| Field::new(field)).collect_to_result()?,\n\t\tFields::Unnamed(_) => {\n\t\t\treturn Err(Error::new(\n\t\t\t\tSpan::call_site(),\n\t\t\t\t\"#[derive(FormData)] cannot be used on tuple structs\"\n\t\t\t))\n\t\t},\n\t\tFields::Unit => Vec::new()\n\t};\n\n\tlet validation_error = ValidationError {\n\t\tname,\n\t\tvis: &input.vis,\n\t\tident: format_ident!(\"{}ValidationError\", name),\n\t\tfields: &fields\n\t};\n\tlet err_ident = &validation_error.ident;\n\n\tlet builder = FormDataBuilder {\n\t\tname,\n\t\terr_ident,\n\t\tident: format_ident!(\"{}FormDataBuilder\", name),\n\t\tgenerics: &input.generics,\n\t\tfields: &fields\n\t};\n\tlet builder_ident = &builder.ident;\n\n\tlet validation_error_struct = validation_error.gen_struct();\n\n\tlet builder_struct = builder.gen_struct();\n\tlet builder_default_impl = builder.gen_default_impl();\n\tlet builder_builder_impl = builder.gen_builder_impl();\n\n\tlet field_idents = fields.iter().map(|f| &f.ident);\n\tlet field_validators = fields.iter().map(|f| {\n\t\tf.validator\n\t\t\t.as_ref()\n\t\t\t.map(|v| quote!(Some({ #v })))\n\t\t\t.unwrap_or_else(|| quote!(::std::option::Option::<()>::None))\n\t});\n\tlet field_validation_errors = fields.iter().map(|f| {\n\t\tf.validation_error\n\t\t\t.as_ref()\n\t\t\t.map(|err| quote!(Some(#err)))\n\t\t\t.unwrap_or_else(|| quote!(::std::option::Option::<String>::None))\n\t});\n\n\tlet validate_trait = format_ident!(\"Validate{}FormData\", name);\n\n\tlet mut dummy = format_ident!(\"_IMPL_FORMDATA_FOR_{}\", name);\n\tdummy.set_span(Span::call_site());\n\tOk(quote! {\n\t\t#validation_error_struct\n\n\t\t#[allow(non_upper_case_globals)]\n\t\tstatic #dummy: () = {\n\t\t\t#builder_struct\n\t\t\t#builder_default_impl\n\t\t\t#builder_builder_impl\n\n\t\t\t#[doc(hidden)]\n\t\t\ttrait #validate_trait {\n\t\t\t\tfn validate(&self) -> Result<(), #err_ident>;\n\t\t\t}\n\n\t\t\timpl #impl_gen #validate_trait for #name #ty_gen #were {\n\t\t\t\t#[doc(hidden)]\n\t\t\t\tfn validate(&self) -> Result<(), #err_ident> {\n\t\t\t\t\t::log::debug!(\"Validating Form Data for type {}\", stringify!(#name));\n\n\t\t\t\t\t#({\n\t\t\t\t\t\tconst name: &str = stringify!(#field_idents);\n\t\t\t\t\t\tlet value = &self.#field_idents;\n\t\t\t\t\t\tlet validator = #field_validators;\n\t\t\t\t\t\tlet validation_error = #field_validation_errors;\n\t\t\t\t\t\tif let Some(validator) = validator {\n\t\t\t\t\t\t\t::gotham_formdata::validate::Validator::validate(validator, value)\n\t\t\t\t\t\t\t\t.map_err(|err| {\n\t\t\t\t\t\t\t\t\tmatch validation_error {\n\t\t\t\t\t\t\t\t\t\tSome(ve) => #err_ident::invalid(name, ve),\n\t\t\t\t\t\t\t\t\t\tNone     => #err_ident::invalid(name, err)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})?;\n\t\t\t\t\t\t}\n\t\t\t\t\t})*\n\n\t\t\t\t\tOk(())\n\t\t\t\t}\n\t\t\t}\n\n\t\t\timpl #impl_gen ::gotham_formdata::FormData for #name #ty_gen #were {\n\t\t\t\ttype Err = ::gotham_formdata::Error<#err_ident>;\n\n\t\t\t\tfn parse_form_data(state: &mut ::gotham_formdata::export::State) -> ::gotham_formdata::FormDataFuture<Self> {\n\t\t\t\t\tuse ::gotham_formdata::export::FutureExt;\n\n\t\t\t\t\tlet content_type = ::gotham_formdata::internal::get_content_type(state);\n\t\t\t\t\tlet body = ::gotham_formdata::internal::get_body(state);\n\n\t\t\t\t\tasync move {\n\t\t\t\t\t\tlet content_type = content_type?;\n\t\t\t\t\t\t::log::debug!(\"Parsing Form Data for type {} with Content-Type {}\", stringify!(#name), content_type);\n\n\t\t\t\t\t\tlet res = ::gotham_formdata::internal::parse::<#builder_ident #ty_gen>(body, content_type).await?;\n\t\t\t\t\t\t#validate_trait::validate(&res).map_err(|err| ::gotham_formdata::Error::InvalidData(err))?;\n\t\t\t\t\t\tOk(res)\n\t\t\t\t\t}.boxed()\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t})\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","derive","src","form_data","validation_error.rs"],"content":"use super::Field;\nuse heck::{CamelCase, SnakeCase};\nuse proc_macro2::{Ident, Span, TokenStream};\nuse syn::{LitStr, Visibility};\n\npub(super) struct ValidationError<'a> {\n\tpub(super) name: &'a Ident,\n\tpub(super) vis: &'a Visibility,\n\tpub(super) ident: Ident,\n\tpub(super) fields: &'a [Field]\n}\n\nimpl<'a> ValidationError<'a> {\n\tpub(super) fn gen_struct(&self) -> TokenStream {\n\t\tlet name = &self.name;\n\t\tlet vis = &self.vis;\n\t\tlet ident = &self.ident;\n\n\t\tlet doc = format!(\n\t\t\t\"This error is returned when form data parsed for [{}] failed validation.\",\n\t\t\tname\n\t\t);\n\n\t\tlet field_names = self\n\t\t\t.fields\n\t\t\t.iter()\n\t\t\t.map(|f| LitStr::new(&f.ident.to_string(), Span::call_site()))\n\t\t\t.collect::<Vec<_>>();\n\t\tlet variant_idents = self\n\t\t\t.fields\n\t\t\t.iter()\n\t\t\t.map(|f| format_ident!(\"{}Invalid\", f.ident.to_string().to_camel_case()))\n\t\t\t.collect::<Vec<_>>();\n\t\tlet invalid_idents = self\n\t\t\t.fields\n\t\t\t.iter()\n\t\t\t.map(|f| format_ident!(\"invalid_{}\", f.ident.to_string().to_snake_case()))\n\t\t\t.collect::<Vec<_>>();\n\t\t// TODO variant_error_types\n\n\t\tquote! {\n\t\t\t#[doc = #doc]\n\t\t\t#[derive(Debug)]\n\t\t\t#vis enum #ident {\n\t\t\t\t#(\n\t\t\t\t\t#variant_idents(String)\n\t\t\t\t),*\n\t\t\t}\n\n\t\t\timpl #ident {\n\t\t\t\t#[doc(hidden)]\n\t\t\t\tfn invalid<Err: ::std::fmt::Display>(field: &str, err: Err) -> Self {\n\t\t\t\t\tmatch field {\n\t\t\t\t\t\t#(\n\t\t\t\t\t\t\t#field_names => Self::#invalid_idents(err),\n\t\t\t\t\t\t)*\n\t\t\t\t\t\t_ => panic!(\"Unknown field {}\", field)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t#(\n\t\t\t\t\tfn #invalid_idents<Err: ::std::fmt::Display>(err: Err) -> Self {\n\t\t\t\t\t\tSelf::#variant_idents(err.to_string())\n\t\t\t\t\t}\n\t\t\t\t)*\n\n\t\t\t\t#vis fn field_name(&self) -> &'static str {\n\t\t\t\t\tmatch self {\n\t\t\t\t\t\t#( Self::#variant_idents(_) => #field_names, )*\n\t\t\t\t\t\t_ => unreachable!()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\timpl ::std::fmt::Display for #ident {\n\t\t\t\tfn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n\t\t\t\t\twrite!(f, \"Invalid value for field {}:\", self.field_name())?;\n\t\t\t\t\tmatch self {\n\t\t\t\t\t\t#( Self::#variant_idents(err) => write!(f, \"{}\", err), )*\n\t\t\t\t\t\t_ => unreachable!()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\timpl ::std::error::Error for #ident {}\n\t\t}\n\t}\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","derive","src","lib.rs"],"content":"//! This crate implements derive macros for the `gotham_formdata` crate.\n#![warn(missing_docs, rust_2018_idioms)]\n#![deny(unreachable_pub)]\n\n#[macro_use]\nextern crate quote;\n\nuse proc_macro::TokenStream;\nuse proc_macro2::TokenStream as TokenStream2;\nuse syn::{parse_macro_input, DeriveInput, Result};\n\nmod form_data;\nmod util;\n\n#[inline]\nfn print_tokens(tokens: TokenStream2) -> TokenStream {\n\t//eprintln!(\"{}\", tokens);\n\ttokens.into()\n}\n\n#[inline]\nfn expand_derive<F>(input: TokenStream, expand: F) -> TokenStream\nwhere\n\tF: FnOnce(DeriveInput) -> Result<TokenStream2>\n{\n\tprint_tokens(expand(parse_macro_input!(input)).unwrap_or_else(|err| err.to_compile_error()))\n}\n\n/// This derive macro implements `FormData` for the struct it is invoked on. Enums, unions and\n/// tuple structs are not supported.\n#[proc_macro_derive(FormData, attributes(validate))]\npub fn derive_form_data(input: TokenStream) -> TokenStream {\n\texpand_derive(input, form_data::expand)\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","derive","src","util.rs"],"content":"use proc_macro2::Span;\nuse syn::{Error, Path};\n\npub(crate) trait CollectToResult {\n\ttype Item;\n\n\tfn collect_to_result(self) -> Result<Vec<Self::Item>, Error>;\n}\n\nimpl<Item, I> CollectToResult for I\nwhere\n\tI: Iterator<Item = Result<Item, Error>>\n{\n\ttype Item = Item;\n\n\tfn collect_to_result(self) -> Result<Vec<Item>, Error> {\n\t\tself.fold(<Result<Vec<Item>, Error>>::Ok(Vec::new()), |res, code| match (code, res) {\n\t\t\t(Ok(code), Ok(mut codes)) => {\n\t\t\t\tcodes.push(code);\n\t\t\t\tOk(codes)\n\t\t\t},\n\t\t\t(Ok(_), Err(errors)) => Err(errors),\n\t\t\t(Err(err), Ok(_)) => Err(err),\n\t\t\t(Err(err), Err(mut errors)) => {\n\t\t\t\terrors.combine(err);\n\t\t\t\tErr(errors)\n\t\t\t}\n\t\t})\n\t}\n}\n\npub(crate) trait PathEndsWith {\n\tfn ends_with(&self, s: &str) -> bool;\n}\n\nimpl PathEndsWith for Path {\n\tfn ends_with(&self, s: &str) -> bool {\n\t\tself.segments.last().map(|segment| segment.ident.to_string()).as_deref() == Some(s)\n\t}\n}\n\npub(crate) trait WithSpan {\n\tfn with_span(self, span: Span) -> Self;\n}\n\nimpl WithSpan for Error {\n\tfn with_span(self, span: Span) -> Self {\n\t\tlet mut err: Option<Self> = None;\n\t\tfor old_err in self {\n\t\t\tlet new_err = Error::new(span, old_err);\n\t\t\terr = match err {\n\t\t\t\tSome(mut err) => {\n\t\t\t\t\terr.combine(new_err);\n\t\t\t\t\tSome(err)\n\t\t\t\t},\n\t\t\t\tNone => Some(new_err)\n\t\t\t};\n\t\t}\n\t\terr.unwrap()\n\t}\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","conversion.rs"],"content":"/*!\nThis mod contains conversion traits for common used types, that allows them to be created from\na stream of bytes. Furthermore, it allows every type that implements [FromStr] plus some other\ncommon types to be converted.\n\n**DO NOT IMPLEMENT ANY OF THESE TRAITS MANUALLY!** If you do, it will likely result in compile\nerrors when the compiler cannot choose which trait to use in the proc-macro generated code.\nInstead, if you want to provide a custom conversion method, just implement it as a method for\nyour type:\n\n```rust\nuse futures_util::{FutureExt, StreamExt};\nuse gotham_formdata::{conversion::ConversionFuture, value::{BytesOrString, Value}, FormData};\n\n/// This type parses Base64-encoded values to a [Vec<u8>].\nstruct Base64(Vec<u8>);\n\nimpl Base64 {\n\t// the method signature needs to be roughly equivalent to this\n\tasync fn convert_value<E>(\n\t\t\tname: &str,\n\t\t\tvalue: Value<'_, gotham_formdata::Error<E>>\n\t) -> Result<Self, gotham_formdata::Error<E>>\n\twhere\n\t\tE: std::error::Error\n\t{\n\t\tlet decoded = match value.value {\n\t\t\tBytesOrString::Bytes(mut stream) => {\n\t\t\t\tlet mut buf: Vec<u8> = Vec::new();\n\t\t\t\twhile let Some(data) = stream.next().await {\n\t\t\t\t\tbuf.extend_from_slice(&data?);\n\t\t\t\t}\n\t\t\t\tbase64::decode(&buf)\n\t\t\t},\n\t\t\tBytesOrString::String(string) => base64::decode(string.as_bytes())\n\t\t}.map_err(|err| gotham_formdata::Error::IllegalField(name.to_owned(), err.into()))?;\n\n\t\tOk(Self(decoded))\n\t}\n}\n\n#[derive(FormData)]\nstruct MyData {\n\tfoo: Base64\n}\n# mod base64 { pub fn decode(input: &[u8]) -> Result<Vec<u8>, std::convert::Infallible> { unimplemented!() } }\n```\n*/\n\nuse crate::{\n\tvalue::{BytesOrString, Value},\n\tError\n};\nuse bytes::{Bytes, BytesMut};\nuse futures_util::{future::FutureExt, stream::StreamExt};\nuse gotham::anyhow;\nuse std::{future::Future, pin::Pin, str::FromStr};\n\n/// Re-exports for use in derive macro.\n#[doc(hidden)]\npub mod prelude {\n\tpub use super::{ConvertFromStr, ConvertRawBytes};\n}\n\n/// The future returned from conversion methods.\npub type ConversionFuture<'a, T, Err> = Pin<Box<dyn Future<Output = Result<T, Err>> + Send + 'a>>;\n\n/// This trait is used to convert types that implement [FromStr] from a stream of bytes.\n///\n/// **DO NOT IMPLEMENT MANUALLY!** Look at the [module documentation](self) for an example how\n/// to convert custom types.\npub trait ConvertFromStr<Err>: Sized {\n\t/// Perform the conversion.\n\tfn convert_value<'a>(name: &'a str, value: Value<'a, Err>) -> ConversionFuture<'a, Self, Err>;\n}\n\nimpl<E, T> ConvertFromStr<Error<E>> for T\nwhere\n\tE: std::error::Error,\n\tT: FromStr,\n\tT::Err: Into<anyhow::Error>\n{\n\tfn convert_value<'a>(name: &'a str, value: Value<'a, Error<E>>) -> ConversionFuture<'a, Self, Error<E>> {\n\t\tasync move {\n\t\t\tlet buf = match value.value {\n\t\t\t\tBytesOrString::Bytes(mut stream) => {\n\t\t\t\t\tlet mut buf = String::new();\n\t\t\t\t\twhile let Some(data) = stream.next().await {\n\t\t\t\t\t\tlet data = data?;\n\t\t\t\t\t\tlet str = String::from_utf8_lossy(data.as_ref());\n\t\t\t\t\t\tbuf.push_str(&str);\n\t\t\t\t\t}\n\t\t\t\t\tbuf.into()\n\t\t\t\t},\n\t\t\t\tBytesOrString::String(buf) => buf\n\t\t\t};\n\n\t\t\tbuf.parse::<Self>()\n\t\t\t\t.map_err(|err| Error::IllegalField(name.to_owned(), err.into()))\n\t\t}\n\t\t.boxed()\n\t}\n}\n\n/// This trait is used to convert `Vec<u8>` and similar types from a stream of bytes.\n///\n/// **DO NOT IMPLEMENT MANUALLY!** Look at the [module documentation](self) for an example how\n/// to convert custom types.\npub trait ConvertRawBytes<'a, Err>: Sized {\n\t/// Perform the conversion.\n\tfn convert_value(name: &'a str, value: Value<'a, Err>) -> ConversionFuture<'a, Self, Err>;\n}\n\nimpl<'a, Err: 'a> ConvertRawBytes<'a, Err> for Vec<u8> {\n\tfn convert_value(_name: &'a str, value: Value<'a, Err>) -> ConversionFuture<'a, Self, Err> {\n\t\tasync move {\n\t\t\tmatch value.value {\n\t\t\t\tBytesOrString::Bytes(mut stream) => {\n\t\t\t\t\tlet mut buf: Vec<u8> = Vec::new();\n\t\t\t\t\twhile let Some(data) = stream.next().await {\n\t\t\t\t\t\tbuf.extend_from_slice(&data?);\n\t\t\t\t\t}\n\t\t\t\t\tOk(buf)\n\t\t\t\t},\n\t\t\t\tBytesOrString::String(string) => Ok(string.as_bytes().to_vec())\n\t\t\t}\n\t\t}\n\t\t.boxed()\n\t}\n}\n\nimpl<'a, Err: 'a> ConvertRawBytes<'a, Err> for BytesMut {\n\tfn convert_value(_name: &'a str, value: Value<'a, Err>) -> ConversionFuture<'a, Self, Err> {\n\t\tasync move {\n\t\t\tmatch value.value {\n\t\t\t\tBytesOrString::Bytes(mut stream) => {\n\t\t\t\t\tlet mut buf = BytesMut::new();\n\t\t\t\t\twhile let Some(data) = stream.next().await {\n\t\t\t\t\t\tbuf.extend_from_slice(&data?);\n\t\t\t\t\t}\n\t\t\t\t\tOk(buf)\n\t\t\t\t},\n\t\t\t\tBytesOrString::String(string) => Ok(string.as_bytes().into())\n\t\t\t}\n\t\t}\n\t\t.boxed()\n\t}\n}\n\nimpl<'a, Err: 'a> ConvertRawBytes<'a, Err> for Bytes {\n\tfn convert_value(name: &'a str, value: Value<'a, Err>) -> ConversionFuture<'a, Self, Err> {\n\t\tBytesMut::convert_value(name, value).map(|res| res.map(Into::into)).boxed()\n\t}\n}\n","traces":[{"line":83,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":84,"address":[4783722,4767530,4772922,4786410,4792034,4764816,4764359,4772370,4773042,4775730,4778434,4789162,4783842,4791888,4780992,4777757,4775058,4783696,4764962,4770354,4778288,4764039,4764519,4764679,4764842,4781138,4786384,4794050,4767650,4767504,4781018,4785858,4763879,4783165,4775584,4789291,4789136,4772896,4764199,4766978,4791914,4786539,4788613,4769677,4780461,4791365,4770208,4778314,4775610,4770234],"length":1,"stats":{"Line":70},"fn_name":"{{closure}}<validation::validate_expected::DataValidationError,alloc::string::String>"},{"line":85,"address":[4792003,4773184,4792176,4781107,4775872,4764931,4775699,4767619,4773011,4783984,4786508,4778403,4786681,4767792,4770323,4770496,4765104,4778576,4781280,4783811,4789260,4789433],"length":1,"stats":{"Line":27},"fn_name":null},{"line":86,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":87,"address":[4767829,4775909,4781317,4786718,4784021,4789470,4773221,4778613,4792213,4770533,4765141],"length":1,"stats":{"Line":1},"fn_name":null},{"line":88,"address":[4765385,4793697,4770721,4773430,4778801,4781429,4786927,4770777,4770742,4767941,4773720,4776202,4784045,4768017,4770826,4784230,4776404,4768122,4781610,4768038,4784209,4789582,4765329,4789763,4784314,4778906,4791350,4778857,4781505,4786962,4792325,4773245,4787220,4787011,4772017,4773514,4778637,4784133,4789494,4781561,4775043,4766625,4780446,4792422,4765640,4765350,4777389,4786830,4776097,4775933,4765434,4776118,4786906,4789658,4789714,4789972,4782797,4771032,4765165,4768324,4789679,4792457,4769309,4769662,4792506,4770557,4792712,4790960,4773409,4786742,4788598,4792237,4767853,4792401,4784520,4766963,4781812,4788208,4776021,4783150,4770645,4772355,4778725,4780093,4781526,4777742,4781341,4768073,4776153,4774705,4784265,4794035,4785505,4779108,4765253,4785843,4773333,4778822,4773465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":89,"address":[4776771,4779475,4790084,4782179,4790247,4787332,4793079,4793404,4785212,4776679,4765752,4779800,4766007,4782087,4787915,4777096,4792987,4787587,4784887,4790339,4773995,4768691,4766332,4771399,4773832,4774412,4771144,4771724,4784795,4765915,4768436,4776516,4787495,4769016,4771307,4784632,4790667,4774087,4768599,4779220,4792824,4779383,4781924,4782504],"length":1,"stats":{"Line":2},"fn_name":null},{"line":90,"address":[4779932,4777228,4765987,4774544,4779455,4790319,4771379,4774067,4766464,4782636,4768671,4790799,4793059,4771856,4788047,4785344,4776751,4787567,4784867,4769148,4793536,4782159],"length":1,"stats":{"Line":2},"fn_name":null},{"line":91,"address":[4771897,4788088,4777269,4766505,4769189,4785385,4774585,4779973,4793577,4790840,4782677],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":95,"address":[4792064,4786569,4781168,4770384,4764992,4778464,4789321,4767680,4775760,4773072,4783872],"length":1,"stats":{"Line":13},"fn_name":null},{"line":98,"address":[4785719,4782910,4788411,4791163,4769527,4777607,4793911,4788471,4766738,4780206,4772130,4777502,4766839,4780311,4783015,4774818,4788321,4791223,4785618,4791073,4793810,4774919,4769422,4772231],"length":1,"stats":{"Line":30},"fn_name":null},{"line":99,"address":[4791208,4795664,4795884,4794796,4795216,4794576,4795440,4796528,4795008,4785705,4796288,4769513,4795676,4796752,4796512,4796304,4780297,4796736,4796092,4795872,4788456,4795232,4772217,4777593,4794784,4766825,4774905,4794588,4796080,4795456,4793897,4783001,4794992],"length":1,"stats":{"Line":14},"fn_name":"{{closure}}<validation::validate_expected::DataValidationError,alloc::string::String>"},{"line":115,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":119,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":133,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":134,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":135,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":136,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":137,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":151,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":152,"address":[],"length":0,"stats":{"Line":3},"fn_name":null}],"covered":25,"coverable":33},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","error.rs"],"content":"use gotham::anyhow;\nuse mime::Mime;\nuse thiserror::Error;\n\n#[derive(Debug, Error)]\n#[non_exhaustive]\n/// This error type is used when parsing form data from a request body was unsuccessful.\npub enum Error<Err: std::error::Error + 'static> {\n\t/// The body of the request could not be read.\n\t#[error(\"The body of the request could not be read\")]\n\tIllegalBody(#[from] gotham::hyper::Error),\n\t/// The content type of the body was not a valid mime type.\n\t#[error(\"The 'Content-Type' header could not be parsed: {0}\")]\n\tIllegalContentType(#[from] mime::FromStrError),\n\t/// The content type of the body contained unreadable bytes.\n\t#[error(\"The 'Content-Type' header could not be parsed: {0}\")]\n\tIllegalContentTypeValue(#[from] gotham::hyper::header::ToStrError),\n\t/// The value of a field could not be parsed into that field's type.\n\t#[error(\"The field {0} could not be parsed: {1}\")]\n\tIllegalField(String, #[source] anyhow::Error),\n\t/// The body was parsed but contained data that did not pass validation.\n\t#[error(\"The body contained invalid data: {0}\")]\n\tInvalidData(#[source] Err),\n\t/// An I/O error occured while reading the body.\n\t#[error(\"I/O Error while reading body: {0}\")]\n\tIoError(#[from] std::io::Error),\n\t/// The body was a multipart body but did not specify a boundary.\n\t#[error(\"The request failed to specify the multipart boundary\")]\n\tMissingBoundary,\n\t/// The request did not specify a content type.\n\t#[error(\"The request is missing a 'Content-Type' header\")]\n\tMissingContentType,\n\t/// One of the multipart parts is missing a `Content-Disposition` header.\n\t#[error(\"Missing a 'Content-Disposition' header\")]\n\tMissingContentDisposition,\n\t/// The body is missing a required field.\n\t#[error(\"Missing Field '{0}'\")]\n\tMissingField(String),\n\t/// The multipart format was invalid.\n\t#[error(\"Multipart error: {0}\")]\n\tMultipartError(#[from] multer::Error),\n\t/// The body's content type is not supported.\n\t#[error(\"Unknown 'Content-Type' header value: {0}\")]\n\tUnknownContentType(Mime),\n\t/// The body contained a field that was not expected.\n\t#[error(\"Unknown Field '{0}'\")]\n\tUnknownField(String)\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","form_data.rs"],"content":"use gotham::state::State;\nuse std::{future::Future, pin::Pin};\n\n/// This is the return type of [FormData::parse_form_data].\n#[allow(type_alias_bounds)]\npub type FormDataFuture<T: FormData> = Pin<Box<dyn Future<Output = Result<T, T::Err>> + Send>>;\n\n/**\nThis is the trait implemented by `#[derive(FormData)]`. It provides a method to parse the struct\nit is implemented for to be parsed from the request body contained in gotham's state.\n\nYou usually don't implement this trait directly, use the derive macro instead.\n*/\npub trait FormData: Sized {\n\t/// The error type returned when parsing the request body was unsuccessful.\n\ttype Err;\n\n\t/// Parse the struct from the request body contained in gotham's state.\n\tfn parse_form_data(state: &mut State) -> FormDataFuture<Self>;\n}\n\n/**\nThis is the equivalent of [FormData] from the state's perspective. Use this if you prefer\n`state.parse_form_data::<MyData>()?` over `MyData::parse_form_data(&mut state)?`.\n*/\npub trait FormDataFromState {\n\t/// Parse `T` from the request body contained in this state.\n\tfn parse_form_data<T: FormData>(&mut self) -> FormDataFuture<T>;\n}\n\nimpl FormDataFromState for State {\n\tfn parse_form_data<T: FormData>(&mut self) -> FormDataFuture<T> {\n\t\tT::parse_form_data(self)\n\t}\n}\n","traces":[{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":2},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","internal.rs"],"content":"use crate::{\n\tvalidate::Validator,\n\tvalue::{BytesOrString, Value},\n\tError, FormData\n};\nuse futures_util::stream::{StreamExt, TryStreamExt};\nuse gotham::{\n\thyper::{\n\t\tbody::{self, Body},\n\t\theader::{HeaderMap, CONTENT_TYPE}\n\t},\n\tstate::State\n};\nuse mime::{Mime, APPLICATION_WWW_FORM_URLENCODED, BOUNDARY, MULTIPART_FORM_DATA};\nuse multer::Multipart;\nuse std::{borrow::Cow, future::Future, pin::Pin};\n\npub fn assert_validator<V: Validator<T>, T: ?Sized>(_: &V) {}\n\npub type FormDataBuilderFuture<'a, Err> = Pin<Box<dyn Future<Output = Result<(), Error<Err>>> + Send + 'a>>;\n\npub trait FormDataBuilder: Default {\n\ttype Data: FormData;\n\t/// The error that can occur during verification.\n\ttype Err: std::error::Error + 'static;\n\n\tfn add_entry<'a>(\n\t\t&'a mut self,\n\t\tname: Cow<'a, str>,\n\t\tvalue: Value<'a, Error<Self::Err>>\n\t) -> FormDataBuilderFuture<'a, Self::Err>;\n\tfn build(self) -> Result<Self::Data, Error<Self::Err>>;\n}\n\npub fn get_content_type<Err: std::error::Error>(state: &State) -> Result<Mime, Error<Err>> {\n\tlet headers: &HeaderMap = state.borrow();\n\tOk(headers\n\t\t.get(CONTENT_TYPE)\n\t\t.ok_or(Error::MissingContentType)?\n\t\t.to_str()?\n\t\t.parse()?)\n}\n\npub fn get_body(state: &mut State) -> Body {\n\tstate.take()\n}\n\npub async fn parse<T: FormDataBuilder>(body: Body, content_type: Mime) -> Result<T::Data, Error<T::Err>> {\n\tif is_urlencoded(&content_type) {\n\t\tparse_urlencoded::<T>(body).await\n\t} else if is_multipart(&content_type) {\n\t\tparse_multipart::<T>(body, &content_type).await\n\t} else {\n\t\tErr(Error::UnknownContentType(content_type))\n\t}\n}\n\nfn is_urlencoded(content_type: &Mime) -> bool {\n\tcontent_type.essence_str() == APPLICATION_WWW_FORM_URLENCODED.as_ref()\n}\n\nasync fn parse_urlencoded<T: FormDataBuilder>(body: Body) -> Result<T::Data, Error<T::Err>> {\n\tlet body = body::to_bytes(body).await?;\n\n\tlet mut builder = T::default();\n\tfor (name, value) in form_urlencoded::parse(&body) {\n\t\tlet value = Value {\n\t\t\tvalue: BytesOrString::String(value),\n\t\t\tcontent_type: None\n\t\t};\n\t\tbuilder.add_entry(name, value).await?;\n\t}\n\tbuilder.build()\n}\n\nfn is_multipart(content_type: &Mime) -> bool {\n\tcontent_type.essence_str() == MULTIPART_FORM_DATA.as_ref()\n}\n\nasync fn parse_multipart<T: FormDataBuilder>(body: Body, content_type: &Mime) -> Result<T::Data, Error<T::Err>> {\n\tlet boundary = content_type.get_param(BOUNDARY).ok_or(Error::MissingBoundary)?.as_str();\n\tlet mut multipart = Multipart::new(body, boundary);\n\n\tlet mut builder = T::default();\n\twhile let Some(field) = multipart.next_field().await? {\n\t\tlet name = field.name().ok_or(Error::MissingContentDisposition)?.to_owned();\n\t\tlet mime = field.content_type().cloned();\n\n\t\tlet stream = field.map_err(Into::into).boxed();\n\t\tlet value = Value {\n\t\t\tvalue: BytesOrString::Bytes(stream),\n\t\t\tcontent_type: mime\n\t\t};\n\t\tbuilder.add_entry(name.into(), value).await?;\n\t}\n\tbuilder.build()\n}\n","traces":[{"line":18,"address":[4614272,4614277,4614245,4614256,4614240,4614279,4614247,4614263,4614261],"length":1,"stats":{"Line":6},"fn_name":"assert_validator<closure-0,u8>"},{"line":35,"address":[4617408,4624688,4620716,4624876,4614476,4615328,4616368,4615516,4616556,4620528,4621568,4623836,4617596,4618636,4614288,4621756,4622608,4619488,4619676,4623648,4618448,4622796],"length":1,"stats":{"Line":17},"fn_name":"get_content_type<validation::validate_min::DataValidationError>"},{"line":36,"address":[4615351,4621591,4622631,4617431,4624711,4620551,4614311,4623671,4616391,4618471,4619511],"length":1,"stats":{"Line":17},"fn_name":null},{"line":37,"address":[4619169,4617463,4624369,4616101,4614491,4615452,4625230,4621771,4619060,4623516,4620652,4617276,4617611,4622110,4625461,4621249,4614412,4616423,4621140,4620731,4616049,4622663,4617141,4621301,4616236,4618020,4621692,4622811,4614343,4615061,4620030,4623220,4624812,4621436,4620100,4622180,4616980,4618129,4623772,4623851,4616910,4617532,4624556,4622732,4618990,4620396,4624260,4619543,4624891,4623381,4619612,4614830,4625596,4622476,4617950,4623150,4614900,4618181,4616492,4615196,4620261,4620209,4619221,4618651,4624190,4624743,4619356,4621070,4620583,4618316,4622289,4623329,4615870,4615940,4618503,4618572,4619691,4621623,4622341,4623703,4624421,4625300,4625409,4615383,4617089,4615531,4615009,4616571],"length":1,"stats":{"Line":119},"fn_name":null},{"line":39,"address":[4614400,4623896,4625209,4614459,4615499,4615440,4618560,4619600,4617579,4617929,4621049,4623760,4617656,4618619,4623129,4620776,4615576,4616616,4620640,4621680,4622089,4624169,4619659,4624936,4620699,4621739,4614536,4616480,4616539,4622720,4616889,4614809,4618969,4622779,4622856,4620009,4615849,4624800,4618696,4624859,4621816,4619736,4617520,4623819],"length":1,"stats":{"Line":34},"fn_name":null},{"line":40,"address":[4623193,4614977,4624233,4614873,4618097,4616953,4619033,4621113,4615913,4620073,4616017,4620177,4621217,4617057,4622153,4625377,4619137,4623297,4625273,4624337,4622257,4617993],"length":1,"stats":{"Line":17},"fn_name":null},{"line":41,"address":[4623356,4617278,4618156,4617116,4619358,4619196,4615036,4620398,4621438,4622478,4620236,4618318,4625598,4625436,4615198,4616076,4622316,4624396,4624558,4621276,4623518,4616238],"length":1,"stats":{"Line":17},"fn_name":null},{"line":44,"address":[4222240],"length":1,"stats":{"Line":6},"fn_name":"get_body"},{"line":45,"address":[5113249],"length":1,"stats":{"Line":6},"fn_name":null},{"line":48,"address":[4666506,4681913,4679984,4665584,4666352,4684151,4672762,4689002,4675018,4665850,4665968,4679530,4666106,4666362,4668391,4686391,4688522,4688976,4689250,4670631,4690778,4665200,4670960,4674913,4675145,4668159,4684480,4672889,4665210,4686264,4686746,4690905,4678002,4675472,4665456,4668746,4680258,4682266,4677169,4686159,4665338,4665466,4670399,4670986,4677754,4666096,4666234,4677728,4686994,4677401,4665072,4665840,4682240,4672657,4683919,4670504,4682514,4671234,4684506,4688417,4665722,4666224,4680010,4675746,4673216,4681786,4679425,4673490,4673242,4677274,4684024,4668994,4668264,4690673,4665082,4668720,4679657,4681681,4665978,4665594,4686720,4688649,4666480,4665712,4675498,4666754,4665328,4684754],"length":1,"stats":{"Line":119},"fn_name":"parse<validation::validate_custom_validator_string_str::_IMPL_FORMDATA_FOR_Data::DataFormDataBuilder>"},{"line":49,"address":[4684721,4689916,4668152,4682481,4679418,4683173,4674156,4685413,4686961,4674906,4669653,4678668,4673457,4680225,4677969,4690666,4670392,4666721,4671900,4676412,4675713,4677162,4680924,4681674,4686152,4687660,4667413,4683912,4688410,4668961,4672650,4671201,4689217],"length":1,"stats":{"Line":34},"fn_name":null},{"line":50,"address":[4506850,4536722,4522242,4533570,4500322,4509314,4512386,4541714,4518290,4524322,4530818],"length":1,"stats":{"Line":48},"fn_name":null},{"line":51,"address":[4674165,4672648,4684846,4687669,4667422,4680933,4682606,4678855,4678677,4683910,4669836,4680350,4685596,4671909,4681111,4670390,4668150,4689925,4672087,4685422,4688408,4671326,4674343,4674904,4687847,4678094,4687086,4690664,4690103,4681672,4675838,4676599,4673582,4666846,4669662,4667596,4683182,4669086,4683356,4677160,4679416,4676421,4689342,4686150],"length":1,"stats":{"Line":3},"fn_name":null},{"line":52,"address":[4524406,4500406,4522326,4518374,4536806,4509398,4512470,4541798,4530902,4533654,4506934],"length":1,"stats":{"Line":3},"fn_name":null},{"line":54,"address":[4683204,4687691,4671931,4689947,4685444,4669684,4667444,4676443,4678699,4674187,4680955],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[4222272],"length":1,"stats":{"Line":6},"fn_name":"is_urlencoded"},{"line":59,"address":[4222281],"length":1,"stats":{"Line":6},"fn_name":null},{"line":62,"address":[4644106,4651050,4626378,4664362,4661552,4640895,4625728,4626528,4626608,4650518,4625738,4629409,4626048,4626298,4625968,4633600,4639898,4637088,4650353,4651903,4655444,4657522,4660842,4626058,4630959,4658032,4626368,4630080,4644080,4647578,4661578,4648446,4625978,4626128,4637114,4643574,4646881,4637967,4626895,4647552,4651024,4626218,4630367,4626634,4651311,4654544,4640608,4654013,4644367,4662431,4633626,4643409,4636413,4629574,4632890,4633069,4640634,4654831,4625808,4636578,4641502,4658911,4640077,4654570,4664541,4626208,4626538,4625818,4647839,4653834,4658058,4625898,4633887,4626138,4627502,4644974,4626288,4625888,4626458,4626448,4637375,4630106,4634500,4647046,4661021,4661839,4658319,4657357],"length":1,"stats":{"Line":112},"fn_name":"parse_urlencoded<validation::validate_custom_validator::_IMPL_FORMDATA_FOR_Data::DataFormDataBuilder>"},{"line":63,"address":[4515999,4516463,4528047,4523519,4500751,4542159,4501183,4508815,4539503,4538431,4497967],"length":1,"stats":{"Line":64},"fn_name":null},{"line":65,"address":[4641342,4662284,4634338,4634543,4655282,4648488,4658764,4637820,4644814,4627544,4645016,4648286,4630812,4627342,4655487,4641544,4651756],"length":1,"stats":{"Line":23},"fn_name":null},{"line":66,"address":[4655631,4662788,4651941,4638126,4631118,4634615,4652062,4648505,4632502,4658949,4634861,4627859,4629035,4645157,4634563,4631049,4645085,4631316,4638324,4641613,4649979,4651993,4653446,4634687,4627613,4630997,4638057,4646507,4648557,4636039,4641859,4643035,4648629,4656983,4627685,4659001,4659070,4659268,4655559,4660454,4662469,4662521,4662590,4638005,4641685,4627561,4655805,4645033,4663974,4645331,4648803,4641561,4652260,4639510,4655507],"length":1,"stats":{"Line":64},"fn_name":null},{"line":68,"address":[4638598,4649071,4652534,4659542,4663062,4656073,4635129,4628127,4645599,4631590,4642127],"length":1,"stats":{"Line":16},"fn_name":null},{"line":71,"address":[4498073,4538537,4508921,4539595,4542251,4523625,4516569,4516091,4528139,4500843,4501275],"length":1,"stats":{"Line":48},"fn_name":null},{"line":73,"address":[4655775,4627829,4645301,4634831,4638270,4648773,4659214,4631262,4641829,4662734,4652206],"length":1,"stats":{"Line":16},"fn_name":null},{"line":76,"address":[4222368],"length":1,"stats":{"Line":1},"fn_name":"is_multipart"},{"line":77,"address":[4222377],"length":1,"stats":{"Line":1},"fn_name":null},{"line":80,"address":[4542485,4510265,4542811,4507520,4520709,4519433,4504793,4521035,4510581,4507867,4502153,4520021,4521753,4542665,4501952,4502299,4518624,4520000,4519216,4501973,4520889,4510777,4504597,4510069,4504953,4510048,4510425,4510560,4518825,4519237,4520201,4521376,4507541,4518645,4519593,4521593,4507721,4504576,4542464,4510937,4518971,4520347,4520688,4521397],"length":1,"stats":{"Line":7},"fn_name":"drop_in_place<generator-0>"},{"line":81,"address":[4556493,4591386,4567874,4562282,4573917,4603023,4579757,4597183,4603053,4597659,4597710,4591835,4609339,4602818,4562798,4597643,4556923,4586043,4574347,4585567,4562731,4568109,4580203,4568539,4586094,4574414,4585578,4562066,4550418,4591375,4573898,4551083,4597194,4551150,4597213,4591902,4562747,4568555,4551099,4562271,4573887,4556463,4591170,4579522,4574363,4556474,4579738,4603034,4556258,4580187,4603499,4608863,4568090,4562301,4568079,4608658,4591851,4580254,4550634,4609323,4609390,4608893,4585597,4556939,4608874,4568606,4579727,4550653,4591405,4573682,4550623,4556990,4585362,4603550,4603483,4586027,4596978],"length":1,"stats":{"Line":5},"fn_name":null},{"line":82,"address":[4562830,4586126,4574446,4557022,4591934,4580286,4603582,4609422,4568638,4551182,4597742],"length":1,"stats":{"Line":1},"fn_name":null},{"line":84,"address":[4568726,4568781,4586269,4609565,4603670,4609510,4557165,4592022,4574534,4592080,4557110,4586214,4551270,4562918,4562976,4580374,4597830],"length":1,"stats":{"Line":1},"fn_name":null},{"line":85,"address":[4557247,4604705,4584253,4598441,4603761,4595891,4595171,4551361,4601709,4566067,4569098,4557424,4590077,4560253,4572589,4609824,4598761,4558083,4581409,4552201,4604281,4610163,4613373,4563901,4586867,4568996,4586484,4577655,4603699,4610571,4603894,4560973,4604601,4606791,4609647,4580465,4586528,4551881,4555149,4551538,4592165,4592298,4593093,4581305,4558171,4603829,4563194,4612653,4587187,4589357,4563296,4587275,4580403,4551429,4580533,4580598,4575465,4574693,4578413,4610483,4562999,4551299,4552305,4554391,4569787,4563061,4600951,4569379,4583495,4597859,4574563,4575569,4592103,4557482,4597989,4569040,4574860,4571869,4563238,4586289,4609585,4598054,4566787,4592685,4568863,4609715,4574802,4603996,4586419,4586586,4575145,4568931,4598865,4580700,4557315,4574625,4574758,4568801,4598098,4557763,4609882,4607549,4557380,4592400,4592233,4557185,4563129,4597921,4551494,4593005,4569699,4563581,4580985,4551596,4592342,4603938,4580642,4609780,4598156,4586351,4563989],"length":1,"stats":{"Line":9},"fn_name":null},{"line":86,"address":[4570437,4564061,4587553,4558449,4604777,4581657,4605335,4564261,4558419,4570035,4610643,4570417,4604983,4605355,4610830,4569859,4564231,4599143,4604964,4552564,4593717,4564633,4575847,4575641,4587523,4599515,4576199,4593165,4599113,4593346,4599495,4564613,4552553,4558801,4581481,4558243,4552583,4593737,4558430,4575828,4552935,4587905,4610819,4576219,4564242,4587925,4570065,4587534,4593335,4610849,4611221,4598937,4587347,4552377,4570046,4581668,4558821,4552955,4582039,4593365,4599124,4611201,4604953,4575817,4581687,4582059],"length":1,"stats":{"Line":4},"fn_name":null},{"line":87,"address":[4605375,4605443,4582198,4564772,4611360,4558960,4593757,4582147,4570525,4570576,4553043,4605494,4570457,4558841,4552975,4576239,4564653,4588064,4564721,4599654,4611309,4582079,4599603,4588013,4593825,4611241,4587945,4558909,4576358,4599535,4576307,4553094,4593876],"length":1,"stats":{"Line":3},"fn_name":null},{"line":89,"address":[4588071,4553101,4594043,4605661,4564779,4570583,4559127,4588231,4599661,4558967,4582365,4553261,4564939,4576365,4570743,4599821,4593883,4582205,4576525,4605501,4611367,4611527],"length":1,"stats":{"Line":2},"fn_name":null},{"line":91,"address":[4564960,4594064,4570764,4588252,4576546,4553282,4605682,4599842,4582386,4611548,4559148],"length":1,"stats":{"Line":1},"fn_name":null},{"line":94,"address":[4510872,4520282,4521688,4542746,4520970,4519528,4502234,4518906,4510360,4507802,4504888],"length":1,"stats":{"Line":4},"fn_name":null},{"line":96,"address":[4555078,4601638,4590030,4566740,4578342,4572542,4584182,4595844,4607478,4560926,4613326],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":36,"coverable":37},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","lib.rs"],"content":"/*!\nThis crate is an extension to the popular [gotham web framework][gotham] for Rust. It aims to\nreduce boilerplate necessary to read request bodies today as a stop-gap until gotham finally\nimplements a [body extractor].\n\n# :sparkles: Features\n\n- Parse `application/x-www-form-urlencoded` request bodies\n- Parse `multipart/form-data` request bodies\n- Verify the parsed request body\n\n# :warning: Warning\n\nThis crate is asynchronous, but does not yet enforce uploads limits. **YOU ARE RESPONSIBLE\nFOR ENFORCING UPLOAD LIMITS.**\n\n# :spiral_notepad: Example\n\n```rust\n# use gotham::handler::HandlerError;\n# use gotham::helpers::http::response::*;\n# use gotham::hyper::{Body, Response, StatusCode};\n# use gotham::state::State;\n# use mime::TEXT_PLAIN;\nuse gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct LoginData {\n\t#[validate(regex = \"[a-zA-Z0-9_]\", error = \"The username contains illegal characters.\")]\n\tusername: String,\n\t#[validate(min_length = 6)]\n\tpassword: String\n}\n\nasync fn login_handler(state: &mut State) -> Result<Response<Body>, HandlerError> {\n\tlet login_data: LoginData = FormData::parse_form_data(state).await?;\n\tOk(if login_data.password == \"secret\" {\n\t\tcreate_response(state, StatusCode::OK, TEXT_PLAIN, login_data.username)\n\t} else {\n\t\tcreate_empty_response(state, StatusCode::FORBIDDEN)\n\t})\n}\n```\n\n# :label: Versioning\n\nLike all rust crates, this crate will follow semantic versioning guidelines. However, changing\nthe MSRV (minimum supported rust version) is not considered a breaking change.\n\n# :page_with_curl: License\n\n```text\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttps://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n [body extractor]: https://github.com/gotham-rs/gotham/issues/11\n [gotham]: https://github.com/gotham-rs/gotham\n [multipart]: https://crates.io/crates/multipart\n*/\n#![warn(missing_docs, rust_2018_idioms)]\n#![deny(missing_debug_implementations, unreachable_pub)]\n\n#[doc(hidden)]\n/// Not public API.\npub mod export {\n\tpub use futures_util::{future::FutureExt, stream::StreamExt};\n\tpub use gotham::{hyper::body::Bytes, state::State};\n\tpub use log;\n}\n\n#[doc(inline)]\npub use gotham_formdata_derive::*;\n\npub mod conversion;\n\nmod error;\npub use error::*;\n\nmod form_data;\npub use form_data::*;\n\n#[doc(hidden)]\n/// Not public API.\npub mod internal;\n\npub mod validate;\n\npub mod value;\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","validate","expected.rs"],"content":"use super::Validator;\nuse thiserror::Error;\n\n/// This error is emitted by the [ExpectedValidator] if an unexpected value was found.\n#[derive(Debug, Clone, Copy, Error)]\n#[error(\"Value is not in list of expected values.\")]\npub struct UnexpectedValueError;\n\n/// A validator that checks that a value is in a list of accepted values.\n#[derive(Clone, Copy, Debug)]\npub struct ExpectedValidator<'a, T> {\n\texpected: &'a [T]\n}\n\nimpl<'a, T> ExpectedValidator<'a, T> {\n\t/// Create a new [ExpectedValidator].\n\tpub fn new(expected: &'a [T]) -> Self {\n\t\tSelf { expected }\n\t}\n}\n\nimpl<'a, D, T> Validator<D> for ExpectedValidator<'a, T>\nwhere\n\tD: PartialEq<T>\n{\n\ttype Err = UnexpectedValueError;\n\n\tfn validate(self, data: &D) -> Result<(), Self::Err> {\n\t\tif !self.expected.iter().any(|expected| data == expected) {\n\t\t\treturn Err(UnexpectedValueError);\n\t\t}\n\t\tOk(())\n\t}\n}\n","traces":[{"line":17,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":5,"coverable":5},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","validate","length.rs"],"content":"use super::Validator;\nuse thiserror::Error;\n\n/// This error is emitted by the [MinLengthValidator] if the value was too short.\n#[derive(Clone, Copy, Debug, Error)]\n#[error(\"Value is shorter than minimum length of {0}\")]\npub struct ValueTooShortError(usize);\n\n/// A validator that checks that a string has a minimum length.\n#[derive(Clone, Copy, Debug)]\npub struct MinLengthValidator {\n\tmin_length: usize\n}\n\nimpl MinLengthValidator {\n\t/// Create a new [MinLengthValidator].\n\tpub fn new(min_length: usize) -> Self {\n\t\tSelf { min_length }\n\t}\n}\n\nimpl<T: AsRef<str>> Validator<T> for MinLengthValidator {\n\ttype Err = ValueTooShortError;\n\n\tfn validate(self, data: &T) -> Result<(), Self::Err> {\n\t\tif data.as_ref().len() < self.min_length {\n\t\t\treturn Err(ValueTooShortError(self.min_length));\n\t\t}\n\t\tOk(())\n\t}\n}\n\n/// This error is emitted by the [MaxLengthValidator] if the value was too long.\n#[derive(Clone, Copy, Debug, Error)]\n#[error(\"Value is longer than maximum length of {0}\")]\npub struct ValueTooLongError(usize);\n\n/// A validator that checks that a string has a maximum length.\n#[derive(Clone, Copy, Debug)]\npub struct MaxLengthValidator {\n\tmax_length: usize\n}\n\nimpl MaxLengthValidator {\n\t/// Create a new [MaxLengthValidator].\n\tpub fn new(max_length: usize) -> Self {\n\t\tSelf { max_length }\n\t}\n}\n\nimpl<T: AsRef<str>> Validator<T> for MaxLengthValidator {\n\ttype Err = ValueTooLongError;\n\n\tfn validate(self, data: &T) -> Result<(), Self::Err> {\n\t\tif data.as_ref().len() > self.max_length {\n\t\t\treturn Err(ValueTooLongError(self.max_length));\n\t\t}\n\t\tOk(())\n\t}\n}\n","traces":[{"line":17,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":25,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":26,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":29,"address":[4691430],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":54,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":10,"coverable":10},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","validate","mod.rs"],"content":"//! This mod contains the [Validator] trait as well as pre-defined validation methods.\n\nmod expected;\npub use expected::*;\n\nmod length;\npub use length::*;\n\nmod range;\npub use range::*;\n\nmod validator;\npub use validator::*;\n\n#[cfg(feature = \"regex\")]\nmod regex;\n#[cfg(feature = \"regex\")]\npub use regex::*;\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","validate","range.rs"],"content":"use super::Validator;\nuse std::fmt::{Debug, Display};\nuse thiserror::Error;\n\n/// This error is emitted by the [MinValidator] if the value was too small.\n#[derive(Clone, Copy, Debug, Error)]\n#[error(\"Value is smaller than minimum of {0}\")]\npub struct ValueTooSmallError<I: Debug + Display>(I);\n\n/// A validator that checks that an integer is at least of a minimal value.\n#[derive(Clone, Copy, Debug)]\npub struct MinValidator<I> {\n\tmin: I\n}\n\nimpl<I> MinValidator<I> {\n\t/// Create a new [MinValidator].\n\tpub fn new(min: I) -> Self {\n\t\tSelf { min }\n\t}\n}\n\nimpl<I, T> Validator<T> for MinValidator<I>\nwhere\n\tI: Debug + Display + PartialOrd,\n\tT: Clone + Into<I>\n{\n\ttype Err = ValueTooSmallError<I>;\n\n\tfn validate(self, data: &T) -> Result<(), Self::Err> {\n\t\tif data.clone().into() < self.min {\n\t\t\treturn Err(ValueTooSmallError(self.min));\n\t\t}\n\t\tOk(())\n\t}\n}\n\n/// This error is emitted by the [MaxValidator] if the value was too large.\n#[derive(Clone, Copy, Debug, Error)]\n#[error(\"Value is greater than minimum of {0}\")]\npub struct ValueTooLargeError<I: Debug + Display>(I);\n\n/// A validator that checks that an integer is at most of a maximal value.\n#[derive(Clone, Copy, Debug)]\npub struct MaxValidator<I> {\n\tmax: I\n}\n\nimpl<I> MaxValidator<I> {\n\t/// Create a new [MaxValidator].\n\tpub fn new(max: I) -> Self {\n\t\tSelf { max }\n\t}\n}\n\nimpl<I, T> Validator<T> for MaxValidator<I>\nwhere\n\tI: Debug + Display + PartialOrd,\n\tT: Clone + Into<I>\n{\n\ttype Err = ValueTooLargeError<I>;\n\n\tfn validate(self, data: &T) -> Result<(), Self::Err> {\n\t\tif data.clone().into() > self.max {\n\t\t\treturn Err(ValueTooLargeError(self.max));\n\t\t}\n\t\tOk(())\n\t}\n}\n","traces":[{"line":18,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":31,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":51,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":65,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":2},"fn_name":null}],"covered":10,"coverable":10},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","validate","regex.rs"],"content":"use super::Validator;\nuse regex_crate::Regex;\nuse std::{cell::Cell, mem::MaybeUninit, sync::Once};\nuse thiserror::Error;\n\n/// Lazy Regex creation, similar to `lazy_static`. NOT PUBLIC API.\n#[doc(hidden)]\n#[allow(missing_debug_implementations)]\npub struct LazyRegex {\n\traw: &'static str,\n\tre: Cell<MaybeUninit<Result<Regex, regex_crate::Error>>>,\n\tonce: Once\n}\n\nimpl LazyRegex {\n\t#[doc(hidden)]\n\tpub const fn new(raw: &'static str) -> Self {\n\t\tSelf {\n\t\t\traw,\n\t\t\tre: Cell::new(MaybeUninit::uninit()),\n\t\t\tonce: Once::new()\n\t\t}\n\t}\n\n\t#[doc(hidden)]\n\tpub fn get(&'static self) -> Result<&'static Regex, regex_crate::Error> {\n\t\tself.once.call_once(|| self.re.set(MaybeUninit::new(Regex::new(self.raw))));\n\n\t\t// self.re is guaranteed to be initialized at this point\n\t\tlet re = unsafe { &*(*self.re.as_ptr()).as_ptr() };\n\n\t\tmatch re {\n\t\t\tOk(re) => Ok(&re),\n\t\t\tErr(err) => Err(err.clone())\n\t\t}\n\t}\n}\n\n// regex::Regex and regex::Error are both Sync, so this should be fine\nunsafe impl Sync for LazyRegex {}\n\n/// This error is emitted by the [RegexValidator] if the value did not match the regex.\n#[derive(Clone, Copy, Debug, Error)]\n#[error(\"Value is smaller than minimum of {0}\")]\npub struct RegexMismatchError<'re>(&'re Regex);\n\n/// A validator that checks that an integer is at least of a minimal value.\n#[derive(Clone, Debug)]\npub struct RegexValidator<'re> {\n\tre: &'re Regex\n}\n\nimpl<'re> RegexValidator<'re> {\n\t/// Create a new [RegexValidator].\n\tpub fn new(re: &'re Regex) -> Self {\n\t\tSelf { re }\n\t}\n}\n\nimpl<'re, T: AsRef<str>> Validator<T> for RegexValidator<'re> {\n\ttype Err = RegexMismatchError<'re>;\n\n\tfn validate(self, data: &T) -> Result<(), Self::Err> {\n\t\tif !self.re.is_match(data.as_ref()) {\n\t\t\treturn Err(RegexMismatchError(&self.re));\n\t\t}\n\t\tOk(())\n\t}\n}\n","traces":[{"line":17,"address":[4730320],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":20,"address":[5114750],"length":1,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[5114766],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":27,"address":[4728879,4729064,4728864],"length":1,"stats":{"Line":4},"fn_name":"{{closure}}"},{"line":30,"address":[5114938],"length":1,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[4730645,4730684],"length":1,"stats":{"Line":1},"fn_name":null},{"line":33,"address":[5115036,5114988],"length":1,"stats":{"Line":2},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":10,"coverable":14},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","validate","validator.rs"],"content":"use either::Either;\nuse std::{convert::Infallible, marker::PhantomData};\n\n/**\nThis trait allows data of type `T` to be verified against custom criteria.\n\nExample:\n\n```rust\nuse gotham_formdata::FormData;\n\nfn validate_password(password: &String) -> Result<(), &'static str> {\n\tif password.len() < 8 {\n\t\treturn Err(\"Password is too short\");\n\t\t}\n\tOk(())\n}\n\n#[derive(FormData)]\nstruct LoginData {\n\tusername: String,\n\t#[validate(validator = validate_password)]\n\tpassword: String\n}\n```\n*/\npub trait Validator<T: ?Sized> {\n\t/// The error returned when validation failed.\n\ttype Err;\n\n\t/// Performs the validation.\n\tfn validate(self, data: &T) -> Result<(), Self::Err>;\n}\n\n/// Convert `()` into an allways accepting validator.\nimpl<T: ?Sized> Validator<T> for () {\n\ttype Err = Infallible;\n\n\tfn validate(self, _: &T) -> Result<(), Infallible> {\n\t\tOk(())\n\t}\n}\n\n/// Convert any function with the correct signature into a validator.\nimpl<F, Err, T: ?Sized> Validator<T> for F\nwhere\n\tF: Fn(&T) -> Result<(), Err>\n{\n\ttype Err = Err;\n\n\tfn validate(self, data: &T) -> Result<(), Err> {\n\t\tself(data)\n\t}\n}\n\n/// This struct combines two validators and only validates its input if both validators pass it.\n#[derive(Debug, Clone)]\npub struct CombinedValidator<T: ?Sized, V: Validator<T>, W: Validator<T>>(V, W, PhantomData<T>);\n\nimpl<T: ?Sized, V: Validator<T>, W: Validator<T>> CombinedValidator<T, V, W> {\n\t/// Construct a new [CombinedValidator] from two other validators.\n\tpub fn new(first_validator: V, second_validator: W) -> Self {\n\t\tSelf(first_validator, second_validator, Default::default())\n\t}\n}\n\nimpl<T: ?Sized, V: Validator<T>, W: Validator<T>> Validator<T> for CombinedValidator<T, V, W> {\n\ttype Err = Either<V::Err, W::Err>;\n\n\tfn validate(self, data: &T) -> Result<(), Self::Err> {\n\t\tself.0.validate(data).map_err(Either::Left)?;\n\t\tself.1.validate(data).map_err(Either::Right)\n\t}\n}\n","traces":[{"line":39,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":62,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":72,"address":[],"length":0,"stats":{"Line":2},"fn_name":null}],"covered":7,"coverable":9},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","src","value.rs"],"content":"/*!\nThis mod defines the [Value] used for parsing the form data.\n*/\n\nuse bytes::Bytes;\nuse futures_util::stream::Stream;\nuse std::{\n\tborrow::Cow,\n\tfmt::{self, Debug},\n\tpin::Pin\n};\n\npub use mime::Mime;\n\n/// A stream of bytes.\npub type ByteStream<Err> = Pin<Box<dyn Stream<Item = Result<Bytes, Err>> + Send>>;\n\n/// Either a stream of bytes or a string.\npub enum BytesOrString<'a, Err> {\n\t/// Byte stream.\n\tBytes(ByteStream<Err>),\n\t/// String.\n\tString(Cow<'a, str>)\n}\n\nimpl<'a, Err> Debug for BytesOrString<'a, Err> {\n\tfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n\t\tmatch self {\n\t\t\tSelf::Bytes(_) => write!(f, \"BytesOrString::Bytes(...)\"),\n\t\t\tSelf::String(_) => write!(f, \"BytesOrString::String(...)\")\n\t\t}\n\t}\n}\n\n/// A value, either a string parsed from and urlencoded form, or bytes from a multipart body.\n#[derive(Debug)]\npub struct Value<'a, Err> {\n\t/// The value of the field.\n\tpub value: BytesOrString<'a, Err>,\n\t/// The content-type of the field, if any.\n\tpub content_type: Option<Mime>\n}\n","traces":[{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":4},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","multipart.rs"],"content":"use gotham::{\n\thandler::HandlerError,\n\thelpers::http::response::*,\n\thyper::{Body, Response, StatusCode},\n\trouter::builder::*,\n\tstate::State,\n\ttest::TestServer\n};\nuse gotham_formdata::FormData;\nuse mime::{Mime, TEXT_PLAIN};\n\n#[derive(FormData)]\nstruct LoginData {\n\tusername: String,\n\tpassword: String\n}\n\nasync fn login_handler(state: &mut State) -> Result<Response<Body>, HandlerError> {\n\tlet login_data: LoginData = FormData::parse_form_data(state).await?;\n\tOk(if login_data.password == \"secret\" {\n\t\tcreate_response(state, StatusCode::OK, TEXT_PLAIN, login_data.username)\n\t} else {\n\t\tcreate_empty_response(state, StatusCode::FORBIDDEN)\n\t})\n}\n\n#[test]\nfn multipart() {\n\tlet _ = pretty_env_logger::try_init_timed();\n\n\tlet server = TestServer::new(build_simple_router(|router| {\n\t\trouter.post(\"/login\").to_async_borrowing(login_handler);\n\t}))\n\t.unwrap();\n\n\tlet mime: Mime = \"multipart/form-data; boundary=GOTHAMMULTIPART\".parse().unwrap();\n\tlet body = \"--GOTHAMMULTIPART\\r\\nContent-Disposition: form-data; name=\\\"username\\\"\\r\\n\\r\\ntestuser\\r\\n--GOTHAMMULTIPART\\r\\nContent-Disposition: form-data; name=\\\"password\\\"\\r\\n\\r\\nsecret\\r\\n--GOTHAMMULTIPART--\\r\\n\";\n\tlet res = server.client().post(\"http://localhost/login\", body, mime).perform().unwrap();\n\tlet body = res.read_body().unwrap();\n\tassert_eq!(&body, b\"testuser\");\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","trybuild_ui.rs"],"content":"use trybuild::TestCases;\n\n#[test]\nfn trybuild_ui() {\n\tlet t = TestCases::new();\n\tt.compile_fail(\"tests/ui/*.rs\");\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","types.rs"],"content":"use futures_executor::block_on;\nuse gotham::{\n\thyper::{\n\t\tbody::{Body, Bytes},\n\t\theader::{HeaderMap, CONTENT_TYPE}\n\t},\n\tstate::State\n};\nuse gotham_formdata::FormData;\nuse mime::{Mime, APPLICATION_WWW_FORM_URLENCODED};\nuse std::{convert::Infallible, str::FromStr};\n\nfn with_body(body: &'static [u8], content_type: Mime, callback: impl Fn(&mut State)) {\n\tState::with_new(|state| {\n\t\tlet body: Body = body.into();\n\t\tstate.put(body);\n\n\t\tlet mut headers = HeaderMap::new();\n\t\theaders.insert(CONTENT_TYPE, content_type.to_string().parse().unwrap());\n\t\tstate.put(headers);\n\n\t\tcallback(state);\n\t});\n}\n\n#[test]\nfn test_custom_from_str_and_convert() {\n\tuse gotham_formdata::value::Value;\n\n\t#[derive(Debug)]\n\tstruct CustomType(bool);\n\n\timpl FromStr for CustomType {\n\t\ttype Err = Infallible;\n\n\t\tfn from_str(_: &str) -> Result<Self, Infallible> {\n\t\t\tOk(Self(false))\n\t\t}\n\t}\n\n\timpl CustomType {\n\t\tasync fn convert_value<E>(_name: &str, _value: Value<'_, E>) -> Result<Self, E> {\n\t\t\tOk(Self(true))\n\t\t}\n\t}\n\n\t#[derive(Debug, FormData)]\n\tstruct Data {\n\t\tfoo: CustomType\n\t}\n\n\twith_body(b\"foo=\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert!(data.foo.0);\n\t})\n}\n\n#[test]\nfn test_string() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\tfoo: String\n\t}\n\n\twith_body(\n\t\tb\"foo=%F0%9F%9A%A2+DONAUDAMPFSCHIFFFAHRTSKAPIT%C3%84NSM%C3%9CTZE+%F0%9F%91%AE\",\n\t\tAPPLICATION_WWW_FORM_URLENCODED,\n\t\t|state| {\n\t\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\t\tassert_eq!(data, Data {\n\t\t\t\tfoo: \"🚢 DONAUDAMPFSCHIFFFAHRTSKAPITÄNSMÜTZE 👮\".to_owned()\n\t\t\t});\n\t\t}\n\t);\n}\n\n#[test]\nfn test_vec_u8() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\tfoo: Vec<u8>\n\t}\n\n\twith_body(\n\t\tb\"foo=%F0%9F%9A%A2+DONAUDAMPFSCHIFFFAHRTSKAPIT%C3%84NSM%C3%9CTZE+%F0%9F%91%AE\",\n\t\tAPPLICATION_WWW_FORM_URLENCODED,\n\t\t|state| {\n\t\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\t\tassert_eq!(data, Data {\n\t\t\t\tfoo: \"🚢 DONAUDAMPFSCHIFFFAHRTSKAPITÄNSMÜTZE 👮\".as_bytes().to_owned()\n\t\t\t});\n\t\t}\n\t);\n}\n\n#[test]\nfn test_bytes() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\tfoo: Bytes\n\t}\n\n\twith_body(\n\t\tb\"foo=%F0%9F%9A%A2+DONAUDAMPFSCHIFFFAHRTSKAPIT%C3%84NSM%C3%9CTZE+%F0%9F%91%AE\",\n\t\tAPPLICATION_WWW_FORM_URLENCODED,\n\t\t|state| {\n\t\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\t\tassert_eq!(data, Data {\n\t\t\t\tfoo: \"🚢 DONAUDAMPFSCHIFFFAHRTSKAPITÄNSMÜTZE 👮\".as_bytes().into()\n\t\t\t});\n\t\t}\n\t);\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","form_data_enum.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nenum MyFormData {\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","form_data_from_str_and_raw.rs"],"content":"use futures_util::future::FutureExt;\nuse gotham_formdata::FormData;\nuse gotham_formdata::conversion::{ConvertRawBytes, ConversionFuture};\nuse gotham_formdata::value::Value;\nuse std::convert::Infallible;\nuse std::str::FromStr;\n\nstruct CustomType(bool);\n\nimpl FromStr for CustomType {\n\ttype Err = Infallible;\n\t\n\tfn from_str(_: &str) -> Result<Self, Infallible> {\n\t\tOk(Self(false))\n\t}\n}\n\nimpl<'a, E: 'a> ConvertRawBytes<'a, E> for CustomType {\n\tfn convert_value(_name: &'a str, _value: Value<'a, E>) -> ConversionFuture<'a, Self, E> {\n\t\tasync move {\n\t\t\tOk(Self(true))\n\t\t}.boxed()\n\t}\n}\n\n#[derive(FormData)]\nstruct Data {\n\tfoo: CustomType\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","form_data_tuple_struct.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData(String);\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","form_data_union.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nunion MyFormData {\n\tfoo: u8,\n\tbar: i8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","form_data_unparsable.rs"],"content":"use gotham_formdata::FormData;\n\nstruct MyType;\n\n#[derive(FormData)]\nstruct MyFormData {\n\tfoo: MyType\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_custom_nonsense.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(validator = struct CustomValidator)]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_custom_str.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(validator = \"foobar\")]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_min_length_i32.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(min_length = -1 as i32)]\n\tvalue: String\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_min_length_on_u8.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(min_length = 42)]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_min_length_str.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(min_length = \"foobar\")]\n\tvalue: String\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_min_outofbounds.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(min = 12345)]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_multiple_errors.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(min = 1, error = \"Minimum value is 1\", error = \"The value must be at least 1\")]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_no_args.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_no_list.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate = \"custom_validator\"]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","ui","validate_unknown_key.rs"],"content":"use gotham_formdata::FormData;\n\n#[derive(FormData)]\nstruct MyFormData {\n\t#[validate(foo = \"bar\")]\n\tvalue: u8\n}\n\nfn main() {\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","urlencoded.rs"],"content":"use gotham::{\n\thandler::HandlerError,\n\thelpers::http::response::*,\n\thyper::{Body, Response, StatusCode},\n\trouter::builder::*,\n\tstate::State,\n\ttest::TestServer\n};\nuse gotham_formdata::FormData;\nuse mime::{Mime, TEXT_PLAIN};\n\n#[derive(FormData)]\nstruct LoginData {\n\tusername: String,\n\tpassword: String\n}\n\nasync fn login_handler(state: &mut State) -> Result<Response<Body>, HandlerError> {\n\tlet login_data: LoginData = FormData::parse_form_data(state).await?;\n\tOk(if login_data.password == \"secret\" {\n\t\tcreate_response(state, StatusCode::OK, TEXT_PLAIN, login_data.username)\n\t} else {\n\t\tcreate_empty_response(state, StatusCode::FORBIDDEN)\n\t})\n}\n\n#[test]\nfn urlencoded() {\n\tlet _ = pretty_env_logger::try_init_timed();\n\n\tlet server = TestServer::new(build_simple_router(|router| {\n\t\trouter.post(\"/login\").to_async_borrowing(login_handler);\n\t}))\n\t.unwrap();\n\n\tlet mime: Mime = \"application/x-www-form-urlencoded\".parse().unwrap();\n\tlet body = \"username=testuser&password=secret\";\n\tlet res = server.client().post(\"http://localhost/login\", body, mime).perform().unwrap();\n\tlet body = res.read_body().unwrap();\n\tassert_eq!(&body, b\"testuser\");\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","gotham_formdata","gotham_formdata","tests","validation.rs"],"content":"use futures_executor::block_on;\nuse gotham::{\n\thyper::{\n\t\theader::{HeaderMap, CONTENT_TYPE},\n\t\tBody\n\t},\n\tstate::State\n};\nuse gotham_formdata::{Error, FormData};\nuse mime::{Mime, APPLICATION_WWW_FORM_URLENCODED};\nuse std::convert::Infallible;\n\nfn custom_validator(value: &u8) -> Result<(), &'static str> {\n\tif *value >= 128 {\n\t\treturn Err(\"Value out of range\");\n\t}\n\tOk(())\n}\n\nfn with_body(body: &'static [u8], content_type: Mime, callback: impl Fn(&mut State)) {\n\tState::with_new(|state| {\n\t\tlet body: Body = body.into();\n\t\tstate.put(body);\n\n\t\tlet mut headers = HeaderMap::new();\n\t\theaders.insert(CONTENT_TYPE, content_type.to_string().parse().unwrap());\n\t\tstate.put(headers);\n\n\t\tcallback(state);\n\t});\n}\n\n#[test]\nfn validate_custom_error() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(min = 1, error = \"Too small.\")]\n\t\tdata: u8\n\t}\n\n\t// testing that we can define `.validate()` eventhough that name is also used in the derive code\n\timpl Data {\n\t\tfn validate(&self) -> bool {\n\t\t\ttrue\n\t\t}\n\t}\n\n\twith_body(b\"data=1\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert!(data.validate()); // NOTE this is defined above, not generated\n\t\tassert_eq!(data, Data { data: 1 })\n\t});\n\n\twith_body(b\"data=0\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tmatch data {\n\t\t\tError::InvalidData(DataValidationError::DataInvalid(err)) => assert_eq!(err, \"Too small.\"),\n\t\t\t_ => panic!(\"Expected DataVerificationError::DataInvalid, got {:?}\", data)\n\t\t};\n\t});\n}\n\n#[test]\nfn validate_combined_validator() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(min = 1, max = 2)]\n\t\tdata: u8\n\t}\n\n\twith_body(b\"data=1\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: 1 })\n\t});\n\n\twith_body(b\"data=2\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: 2 })\n\t});\n\n\twith_body(b\"data=0\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n\n\twith_body(b\"data=3\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_custom_validator() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(validator = custom_validator)]\n\t\tdata: u8\n\t}\n\n\twith_body(b\"data=1\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: 1 })\n\t});\n\n\twith_body(b\"data=128\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_custom_validator_lambda() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(validator = |value: &u8| {\n\t\t\tif *value == 0 {\n\t\t\t\treturn Err(\"Value must not be 0\");\n\t\t\t}\n\t\t\tOk(())\n\t\t})]\n\t\tdata: u8\n\t}\n\n\twith_body(b\"data=1\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: 1 })\n\t});\n\n\twith_body(b\"data=0\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_custom_validator_string_str() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(validator = |_: &str| Result::<(), Infallible>::Ok(()))]\n\t\tdata: String\n\t}\n\n\twith_body(b\"data=foo\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: \"foo\".to_owned() })\n\t});\n}\n\n#[test]\nfn validate_min_length() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(min_length = 8)]\n\t\tdata: String\n\t}\n\n\twith_body(b\"data=verylong\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data {\n\t\t\tdata: \"verylong\".to_owned()\n\t\t})\n\t});\n\n\twith_body(b\"data=shorter\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_max_length() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(max_length = 7)]\n\t\tdata: String\n\t}\n\n\twith_body(b\"data=shorter\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data {\n\t\t\tdata: \"shorter\".to_owned()\n\t\t})\n\t});\n\n\twith_body(b\"data=verylong\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_min() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(min = 10)]\n\t\tdata: u64\n\t}\n\n\twith_body(b\"data=10\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: 10 })\n\t});\n\n\twith_body(b\"data=9\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_max() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(max = 10)]\n\t\tdata: u64\n\t}\n\n\twith_body(b\"data=10\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: 10 })\n\t});\n\n\twith_body(b\"data=11\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_regex() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(regex = \"^[a-z]+$\")]\n\t\tdata: String\n\t}\n\n\twith_body(b\"data=lower\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data {\n\t\t\tdata: \"lower\".to_owned()\n\t\t})\n\t});\n\n\twith_body(b\"data=UPPER\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n\n#[test]\nfn validate_expected() {\n\t#[derive(Debug, FormData, PartialEq)]\n\tstruct Data {\n\t\t#[validate(expected = &[\"foo\", \"bar\"])]\n\t\tdata: String\n\t}\n\n\twith_body(b\"data=foo\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: \"foo\".to_owned() })\n\t});\n\n\twith_body(b\"data=bar\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap();\n\t\tassert_eq!(data, Data { data: \"bar\".to_owned() })\n\t});\n\n\twith_body(b\"data=other\", APPLICATION_WWW_FORM_URLENCODED, |state| {\n\t\tlet data = block_on(Data::parse_form_data(state)).unwrap_err();\n\t\tassert!(matches!(data, Error::InvalidData(_)));\n\t});\n}\n","traces":[],"covered":0,"coverable":0}]}